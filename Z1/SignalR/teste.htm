
<html>
	<meta name="apple-mobile-web-app-capable" content="yes">
	<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=0">
    <head>
        <title>Canvas Test</title>
    </head>
    <script src="http://code.jquery.com/jquery-1.7.min.js" type="text/javascript"></script>
    <script src="/Scripts/jquery.signalR-1.0.1.min.js" type="text/javascript"></script>
    <script src="~/signalr/hubs" type="text/javascript"></script>
    <script id="MULTI" type="text/javascript">
        //$.connection.hub.logging = true;
        var enviando = false;
        var remoto = $.connection.multi;

        var fAvisoEnviar = function () {
            var xy = oMundo.aHeroi[0].iX + ";" + oMundo.aHeroi[0].iY;
            if (!enviando) {
                enviando = true;
                remoto.server.send(xy).done(function () { enviando = false; });
                console.log("Envia: " + xy);
            }
        };

        remoto.client.fAvisoReceber = function (xy) {
            var n = xy.split(";");
            oMundo.aRival[0].iX = n[0];
            oMundo.aRival[0].iY = n[1];
            console.log("Recebe: " + xy);
        };
    </script>

	<style>
		*
		{
			font-family: Arial;
        	-webkit-touch-callout: none;
        	-webkit-tap-highlight-color: rgba(0,0,0,0);
        	-webkit-user-select: text;
        }
        canvas
        {
        	position:			absolute;
        	left:				0px;
        	right:				0px;
        	top:				0px;
        	bottom:				0px;
	        border-color:		#ffffff;
        }
    </style>
	<body style="background-color:#eeeeee">
		<div id="divCanvas" style="background-color:white;position:relative;top:10px;" />
	</body>
    <script id="CLASSEXTEND" type="text/javascript">
        /* Simple JavaScript Inheritance
        * By John Resig http://ejohn.org/
        * MIT Licensed.
        */
        // Inspired by base2 and Prototype
        (function () {
            var initializing = false, fnTest = /xyz/.test(function () { xyz; }) ? /\b_super\b/ : /.*/;

            // The base Class implementation (does nothing)
            this.Class = function () { };

            // Create a new Class that inherits from this class
            Class.extend = function (prop) {
                var _super = this.prototype;

                // Instantiate a base class (but only create the instance,
                // don't run the init constructor)
                initializing = true;
                var prototype = new this();
                initializing = false;

                // Copy the properties over onto the new prototype
                for (var name in prop) {
                    // Check if we're overwriting an existing function
                    prototype[name] = typeof prop[name] == "function" &&
        typeof _super[name] == "function" && fnTest.test(prop[name]) ?
        (function (name, fn) {
            return function () {
                var tmp = this._super;

                // Add a new ._super() method that is the same method
                // but on the super-class
                this._super = _super[name];

                // The method only need to be bound temporarily, so we
                // remove it when we're done executing
                var ret = fn.apply(this, arguments);
                this._super = tmp;

                return ret;
            };
        })(name, prop[name]) :
        prop[name];
                }

                // The dummy class constructor
                function Class() {
                    // All construction is actually done in the init method
                    if (!initializing && this.init)
                        this.init.apply(this, arguments);
                }

                // Populate our constructed prototype object
                Class.prototype = prototype;

                // Enforce the constructor to be what we expect
                Class.prototype.constructor = Class;

                // And make this class extendable
                Class.extend = arguments.callee;

                return Class;
            };
        })();
    </script>
    <script id="UTIL" type="text/javascript">
        var Util = Class.extend(
        {
            collideArrayWithArray: function (pArray, pWithArray) {
                for (var i = (pArray.length - 1); i >= 0; i--) {
                    var o1 = pArray[i];
                    for (var j = (pWithArray.length - 1); j >= 0; j--) {
                        var o2 = pWithArray[j];
                        o1.collides(o2);
                    }
                }
            },
            updateArray: function (pArray) {
                for (var i = (pArray.length - 1); i >= 0; i--) {
                    var o1 = pArray[i];
                    o1.update()
                }
            }
        });

        var iOSPortrait = function () {
            if (navigator.userAgent.match('iP')) {
                return (Math.abs(window.orientation) == 90);
            }

            return false;
        }
	</script>
    <script id="CONTROLES" type="text/javascript">
        var Controle = Class.extend(
        {
            init: function (pCamera) {
                this.bTouchAvailable = false;
                this.bLeft = false;
                this.bRight = false;
                this.bJump = false;
                this.bJumpReleased = true;
                this.bShoot = false;
                this.bShootReleased = true;
                this.oCamera = pCamera;
                this.aKeyStates = {};
                this.aTouches = [];

                window.addEventListener('touchstart', function (e) { oMundo.oControle.updateTouchStart(e); }, false);
                window.addEventListener('touchmove', function (e) { oMundo.oControle.updateTouchMove(e); }, false);
                window.addEventListener('touchend', function (e) { oMundo.oControle.updateTouchEnd(e); }, false);
                window.addEventListener('touchcancel', function (e) { oMundo.oControle.updateTouchCancel(e); }, false);

                window.addEventListener('keydown', function (e) { oMundo.oControle.updateKeyDown(e); }, false);
                window.addEventListener('keyup', function (e) { oMundo.oControle.updateKeyUp(e); }, false);

                window.addEventListener('orientationchange', this.updateOrientation, false);
            },

            update: function () {
                this.bLeft = false;
                this.bRight = false;
                if (this.aTouches.length > 0) {
                    var iControlSize = 120;
                    if (this.oCamera.hCanvas.width <= 500) var iControlSize = 70;

                    for (var i = 0; i < this.aTouches.length; i++) {
                        if (this.aTouches[i].clientY > this.oCamera.hCanvas.height - 100) {
                            if (this.aTouches[i].clientX < iControlSize) this.bLeft = true;
                            else if (this.aTouches[i].clientX < iControlSize * 2) this.bRight = true;

                            if (this.aTouches[i].clientX > this.oCamera.hCanvas.width - iControlSize) this.bJump = true;
                            else if (this.aTouches[i].clientX > this.oCamera.hCanvas.width - iControlSize * 2) this.bShoot = true;
                        }
                        else {
                            _Debug = "NUVEM";
                        }
                    }
                }
                else {
                    this.bJump = (this.aKeyStates[32]);
                    this.bShoot = (this.aKeyStates[83]);
                    this.bLeft = (this.aKeyStates[37] || this.aKeyStates[65]);
                    this.bRight = (this.aKeyStates[39] || this.aKeyStates[68]);
                }

                if (!this.bJump) this.bJumpReleased = true;
                if (!this.bShoot) this.bShootReleased = true;
            },

            updateTouchStart: function (e) {
                newTouches = e.changedTouches;

                for (var i = 0; i < newTouches.length; i++) {
                    this.aTouches.push(newTouches[i]);

                }

                e.preventDefault();
            },

            updateTouchMove: function (e) {
                movedTouches = e.changedTouches;

                for (var i = 0; i < movedTouches.length; i++) {
                    if (this.aTouches.length > 0) {
                        for (var j = this.aTouches.length - 1; i >= 0; j--) {
                            if (movedTouches[i].identifier == this.aTouches[j].identifier) {
                                this.aTouches.splice(j, 1);
                                this.aTouches.push(movedTouches[i]);
                            }
                        }
                    }
                }
            },

            updateTouchEnd: function (e) {
                endedTouches = e.changedTouches;
                for (var i = 0; i < endedTouches.length; i++) {
                    for (var j = (this.aTouches.length - 1); j >= 0; j--) {
                        if (endedTouches[i].identifier == this.aTouches[j].identifier) {
                            this.aTouches.splice(j, 1);
                        }
                    }
                }
            },

            updateTouchCancel: function (e) {
                endedTouches = e.changedTouches;
                for (var i = 0; i < endedTouches.length; i++) {
                    for (var j = (this.aTouches.length - 1); j >= 0; j--) {
                        if (endedTouches[i].identifier == this.aTouches[j].identifier) {
                            this.aTouches.splice(j, 1);
                        }
                    }
                }
            },

            updateKeyDown: function (e) {
                this.aKeyStates[e.keyCode || e.which] = true;
            },

            updateKeyUp: function (e) {
                this.aKeyStates[e.keyCode || e.which] = false;
            },

            updateOrientation: function () {
                this.oCamera.updateOrientation();
            }
        });
    </script>
    <script ID="OBJETOS" type="text/javascript">
        var Objeto = Class.extend(
        {
            init: function (pX, pY, pW, pH) {
                this.iXI = pX;
                this.iYI = pY;
                this.iX = pX;
                this.iY = pY;
                this.iW = pW;
                this.iH = pH;
            },

            update: function () {
            },

            collisionReaction: function (pO) {
            },

            dies: function () {
            }
        });

        var Colidivel = Objeto.extend(
        {
            collides: function (objE) {
                if ((this.iX + this.iW) <= objE.iX) return;
                if ((this.iY + this.iH) <= objE.iY) return;
                if ((objE.iX + objE.iW) <= this.iX) return;
                if ((objE.iY + objE.iH) <= this.iY) return;
                this.fixCollision(objE);
                objE.collisionReaction(this);
            },

            fixCollision: function (objE) {
                switch (this.fixCollisionFrom(objE)) {
                    case 1:
                        this.iX = objE.iX - this.iW;
                        break;
                    case 2:
                        this.iX = objE.iX + objE.iW;
                        break;
                    case 3:
                        this.iY = objE.iY - this.iH;
                        this.iVelY = 0;
                        break;
                    case 4:
                        this.iY = objE.iY + objE.iH;
                        this.ground();
                        break;
                }
            },

            fixCollisionFrom: function (objE) {
                var iIH = Math.abs(Math.abs((this.iX + this.iW / 2) - (objE.iX + objE.iW / 2)) - this.iW);
                var iIV = Math.abs(Math.abs((this.iY + this.iH / 2) - (objE.iY + objE.iH / 2)) - this.iH);

                if ((iIV < iIH) || (iIV <= this.iVelYMax)) {
                    if (this.iVelY > 0 && this.iY < objE.iY) return 3;
                    if (this.iVelY < 0 && this.iY > objE.iY) return 4;
                    if (this.iVelX > 0 && this.iX < objE.iX) return 1;
                    if (this.iVelX < 0 && this.iX > objE.iX) return 2;
                }
                else {
                    if (this.iVelX > 0 && this.iX < objE.iX) return 1;
                    if (this.iVelX < 0 && this.iX > objE.iX) return 2;
                    if (this.iVelY > 0 && this.iY < objE.iY) return 3;
                    if (this.iVelY < 0 && this.iY > objE.iY) return 4;
                }
            },

            ground: function () {
                this.iVelY = 0;
                this.bJumping = false;
            }
        });

        var PlataformaMovelV = Colidivel.extend(
        {
            init: function (pX, pY, pW, pH) {
                this._super(pX, pY, pW, pH);
                this.iVelY = 2;
                this.iSentidoV = 1;
            },

            update: function () {
                this.iY += this.iSentidoV * this.iVelY;
                if (this.iSentidoV > 0) {
                    if (this.iY >= this.iYI + 100) {
                        this.iSentidoV = -1;
                        this.iY = this.iYI + 100;
                    }
                }
                else {
                    if (this.iY < this.iYI) {
                        this.iSentidoV = 1;
                        this.iY = this.iYI;
                    }

                }
            },

            collisionReaction: function (pO) {
                switch (this.fixCollisionFrom(pO)) {
                    case 3:
                        //
                        pO.iY = this.iY + this.iH - 3;
                        pO.ground();
                        break;
                }
            }
        });

        var PlataformaMovelH = Colidivel.extend(
        {
            init: function (pX, pY, pW, pH) {
                this._super(pX, pY, pW, pH);
                this.iVelX = 2;
                this.iSentidoH = 1;
            },

            update: function () {
                this.iX += this.iSentidoH * this.iVelX;
                if (this.iSentidoH > 0) {
                    if (this.iX >= this.iXI + 100) {
                        this.iSentidoH = -1;
                        this.iX = this.iXI + 100;
                    }
                }
                else {
                    if (this.iX < this.iXI) {
                        this.iSentidoH = 1;
                        this.iX = this.iXI;
                    }
                }
            },

            collisionReaction: function (pO) {
                pO.iX += this.iSentidoH * this.iVelX;
                pO.iY -= 3;
                pO.ground();
            }
        });

        var Personagem = Colidivel.extend(
        {
            init: function (pX, pY, pW, pH) {
                this._super(pX, pY, pW, pH);
                this.iSentido = 1;
                this.iFrames = 0;
                this.iVelX = 5;
                this.iVelXMax = 10;
                this.iVelY = 0;
                this.iVelYMax = 20;
            },

            update: function () {
                this.iX += this.iVelX;
                this.iY += this.iVelY;
                this.gravity();
                this.fix();
            },

            fix: function () {
                if (this.iY < 0) {
                    this.iY = 0;
                    this.ground();
                }
            },

            dies: function () {
            },

            gravity: function () {
                this.iVelY -= 2;
                if (this.iVelY < -this.iVelYMax) this.iVelY = -this.iVelYMax;
            }
        });

        var Inimigo = Personagem.extend(
    	{
    	    update: function () {
    	        this.iVelX = 2;
    	        this._super();
    	    },
    	    dies: function () {
    	        oMundo.removeEnemyObject(this);
    	    }
    	});

        var Rival = Inimigo.extend(
        {
            update: function () {}
        });

        var Heroi = Personagem.extend(
        {
            update: function () {
                this.iVelX = 0;
                if (this.oControle.bLeft && !this.oControle.bRight) { this.iSentido = -1; this.iVelX = -5; }
                if (this.oControle.bRight && !this.oControle.bLeft) { this.iSentido = 1; this.iVelX = 5; }
                if (this.oControle.bJump) this.jump();
                if (this.oControle.bShoot) this.shoot();
                this._super();
            },

            jump: function () {
                if (this.oControle.bJumpReleased) {
                    if (!this.bJumping) {
                        this.iVelY = this.iVelYMax;
                        this.bJumping = true;
                        this.oControle.bJumpReleased = false;
                    }
                }
            },

            shoot: function () {
                if (this.oControle.bShootReleased) {
                    var iSX = this.iX;
                    var iSY = this.iY;
                    iSY += (this.iH / 2);
                    if (this.iSentido == 1) iSX += this.iW;
                    oMundo.addShotObject(iSX, iSY, this.iSentido, this);
                    this.oControle.bShootReleased = false;
                }
            }
        });

        var Tiro = Personagem.extend(
		{
		    start: function (pObjeto, pSentido) {
		        this.iTiming = 100;
		        this.iSentido = pSentido;
		        this.iVelX = 20 * pSentido;
		    },

		    update: function () {
		        this._super();
		        this.iTiming--;
		        if (this.iTiming < 0) this.dies();
		    },

		    fixCollision: function (objE) {
		        objE.dies();
		        this.dies();
		    },

		    dies: function () {
		        oMundo.removeShotObject(this);
		    },

		    fix: function () { },
		    gravity: function () { }
		});
	</script>
    <script ID="ENGINE" type="text/javascript">
        var _Debug = "---";

        var Mundo = Class.extend(
        {
            init: function (pFPS) {
                this.iFPS = pFPS;
                this.aHeroi = [];
                this.aHeroiTiros = [];
                this.aInimigos = [];
                this.aInimigosTiros = [];
                this.aCenario = [];
                this.oCamera = new Camera;
                this.oControle = new Controle(this.oCamera);
                this.oUtil = new Util;
                this.aRival = [];

                this.aHeroi.push(new Heroi(100, 100, 20, 20));
                this.aHeroi[0].oControle = this.oControle;
                this.aRival.push(new Rival(100, 100, 20, 20));

                //CARREGAR ARRAYS
                this.aCenario.push(new Objeto(0, 0, 1000, 50));
                this.aCenario.push(new Objeto(150, 200, 50, 50));
                this.aCenario.push(new Objeto(200, 200, 50, 50));
                this.aCenario.push(new Objeto(250, 200, 50, 50));
                this.aCenario.push(new Objeto(300, 200, 50, 50));
                this.aCenario.push(new Objeto(350, 200, 50, 50));
                this.aCenario.push(new Objeto(400, 200, 50, 50));
                this.aCenario.push(new Objeto(450, 200, 50, 50));
                this.aCenario.push(new Objeto(500, 200, 50, 50));
                this.aCenario.push(new PlataformaMovelV(0, 50, 50, 50));
                this.aCenario.push(new PlataformaMovelH(1050, 50, 50, 50));

                //CARREGAR ARRAYS
                this.aInimigos.push(new Inimigo(100, 100, 50, 50));
                this.aInimigos.push(new Inimigo(200, 200, 50, 50));
                this.aInimigos.push(new Inimigo(300, 300, 50, 50));
            },

            update: function () {
                this.oControle.update();

                this.oUtil.updateArray(this.aHeroi);
                this.oUtil.updateArray(this.aInimigos);
                this.oUtil.updateArray(this.aHeroiTiros);
                this.oUtil.updateArray(this.aInimigosTiros);
                this.oUtil.updateArray(this.aCenario);

                this.oUtil.collideArrayWithArray(this.aHeroi, this.aCenario);
                this.oUtil.collideArrayWithArray(this.aInimigos, this.aCenario);
                this.oUtil.collideArrayWithArray(this.aHeroiTiros, this.aInimigos);
                this.oUtil.collideArrayWithArray(this.aHeroiTiros, this.aCenario);

                this.oCamera.update(this.aHeroi[0]);

                this.oCamera.draw(this.aHeroi);
                this.oCamera.draw(this.aInimigos);
                this.oCamera.draw(this.aHeroiTiros);
                this.oCamera.draw(this.aInimigosTiros);
                this.oCamera.draw(this.aCenario);
                this.oCamera.draw(this.aRival);
            },

            addShotObject: function (pX, pY, pSentido, pObjeto) {
                var iSW = 20;
                var iPSW = pX;
                if (pSentido < 1) iPSW -= iSW;
                var shoot = new Tiro(iPSW, pY, iSW, 10);
                shoot.start(pObjeto, pSentido);
                this.aHeroiTiros.push(shoot);
            },

            removeShotObject: function (pObjeto) {
                this.aHeroiTiros.splice(this.aHeroiTiros.indexOf(pObjeto), 1);
            },

            removeEnemyObject: function (pObjeto) {
                this.aInimigos.splice(this.aInimigos.indexOf(pObjeto), 1);
            }
        });

        var Camera = Class.extend(
        {
            init: function () {
                this.iX = 0;
                this.iY = 0;
                this.iVelX = 4;
                this.iVelY = 4;

                var div = document.getElementById('divCanvas');
                this.hCanvas = document.createElement('canvas');
                this.oContext = this.hCanvas.getContext('2d');
                this.hCanvas.setAttribute("border", "1px solid #888888");
                div.appendChild(this.hCanvas);
                this.updateOrientation();
            },

            update: function (pAlvo) {
                var iOH = pAlvo.iX - 200;
                if (Math.abs(this.iX + this.iVelX - iOH) <= Math.abs(this.iVelX)) {
                    this.iX = iOH;
                }
                else {
                    if (iOH > this.iX) this.iX += this.iVelX;
                    else this.iX -= this.iVelX;
                }

                this.oContext.clearRect(0, 0, this.hCanvas.width, this.hCanvas.height);
                this.oContext.font = "30px Arial";
                this.oContext.fillText(_Debug, 10, 30, (this.hCanvas.width - 20));
            },

            updateOrientation: function () {
                if (iOSPortrait()) {
                    this.hCanvas.width = screen.availHeight;
                    this.hCanvas.height = screen.availWidth - 100;
                }
                else {
                    this.hCanvas.width = screen.availWidth;
                    this.hCanvas.height = screen.availHeight - 500;
                }
            },

            draw: function (pObjetos) {
                for (var indice in pObjetos) {
                    //this.oContext.fillStyle = objeto.sColor;
                    var o = pObjetos[indice];
                    var dX = o.iX - this.iX;
                    var dY = o.iY - this.iY;
                    this.oContext.fillRect(dX, this.hCanvas.height - (o.iH + dY), o.iW, o.iH);
                }
            }
        });

        var oMundo = new Mundo(60);
        $.connection.hub.start().done(function () {
            setInterval(function () { oMundo.update(); }, 1000 / oMundo.iFPS);
            setInterval(function () { fAvisoEnviar(); }, 1000 / oMundo.iFPS);
        });

	</script>


</html>